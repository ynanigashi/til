    #2以上の整数n => [[素因数, 指数], ...]の2次元リストを取得
def factorization(n):
    #素因数とその数を保存するためのアレイ（辞書でもいい）
    arr = []
    """
    ルートNの２乗はNなので確認するのは、n^1/2（ルートN）まででOK
    このループの回し方だと4とか6素数以外も検証してしまうが、
    上記理由により計算量は問題ないかつ、
    検証する数の素数は既に検証済みなので素数としてカウントされ得ない
    """
    for i in range(2, int(-(-n**0.5//1))+1):
        #割り切れる場合はiの値が素因数なので割り切れなくなるまで割る
        if n%i == 0:
            cnt=0
            while n%i == 0:
                cnt += 1
                n //= i
            #割り切れなくなった段階でWhileループを抜け記録
            arr.append([i, cnt])
    #n自体が素数であった場合にこちらで追加
    if n != 1:
        arr.append([n, 1])
    return arr

N = int(input())
ans = 0
#1の場合は0を表示する
if N != 1:
    fact_list = factorization(N)
    #今回素因数は関係ないので無視
    for _, i in fact_list:
        j = 1
        """
        iから「1,2,3,4,....」１ずつ短調増加する数列を引いていき
        第何項まで引けるかを全ての素因数に対し実行
        （やってることは単純なのに説明がむずいな）
        """"
        while i >= j:
            ans += 1
            i = i - j
            j += 1
            
print(ans)
